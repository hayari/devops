# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
 
  config.vm.define "server1" do |server1|
    server1.vm.box = "centos/7"
    server1.vm.network "private_network", ip: "192.168.4.11"
    server1.vm.hostname = "server1.example.com"
    server1.hostsupdater.aliases = ["server1", "server1.example.com"]
    #server1.ssh.host = "192.168.4.11"
    server1.vm.provision "shell", inline: <<-SHELL
        sudo sed -i 's/PasswordAuthentication no/ PasswordAuthentication yes/g' /etc/ssh/sshd_config    
        sudo systemctl reload sshd
      SHELL
  end
  
  config.vm.define "server2" do |server2|
    server2.vm.box = "centos/7"
    server2.vm.network "private_network", ip: "192.168.4.12"
    server2.vm.hostname = "server2.example.com"
    server2.hostsupdater.aliases = ["server2", "server2.example.com"]
    server2.ssh.host = "192.168.4.12"
    server2.vm.provision "shell", inline: <<-SHELL
        sudo sed -i 's/PasswordAuthentication no/ PasswordAuthentication yes/g' /etc/ssh/sshd_config    
        sudo systemctl reload sshd
      SHELL
  end
  
  config.vm.define "server3" do |server3|
    server3.vm.box = "centos/7"
    server3.vm.network "private_network", ip: "192.168.4.13"
    server3.vm.hostname = "server3.example.com"
    server3.hostsupdater.aliases = ["server3", "server3.example.com"]
    server3.ssh.host = "192.168.4.13"
    server3.vm.provision "shell", inline: <<-SHELL
        sudo sed -i 's/PasswordAuthentication no/ PasswordAuthentication yes/g' /etc/ssh/sshd_config    
        sudo systemctl reload sshd
      SHELL
  end

  config.vm.define "server4" do |server4|
    server4.vm.box = "centos/7"
    server4.vm.network "private_network", ip: "192.168.4.14"
    server4.vm.hostname = "server4.example.com"
    server4.hostsupdater.aliases = ["server4", "server4.example.com"]
    server4.ssh.host = "192.168.4.14"
    server4.vm.provision "shell", inline: <<-SHELL
        sudo sed -i 's/PasswordAuthentication no/ PasswordAuthentication yes/g' /etc/ssh/sshd_config    
        sudo systemctl reload sshd
      SHELL
  end

  config.vm.provider "libvirt" do |v|
    v.memory = 4096
    v.cpus = 2
  end

  config.vm.define "tower" do |tower|
    tower.vm.box = "centos/7"
    tower.vm.network "private_network", ip: "192.168.4.10"
    tower.vm.hostname = "tower.example.com"
    tower.hostsupdater.aliases = ["tower", "tower.example.com"]
    tower.ssh.host = "192.168.4.10"
    tower.vm.provision "shell", inline: <<-SHELL
        sudo sed -i 's/PasswordAuthentication no/ PasswordAuthentication yes/g' /etc/ssh/sshd_config    
        sudo systemctl reload sshd
      SHELL
  end
  
  config.vm.provision "file", source: "id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
  public_key = File.read("id_rsa.pub")
  config.vm.provision :shell, :inline =>"
     echo 'Copying ansible-vm public SSH Keys to the VM'
     mkdir -p /home/vagrant/.ssh
     chmod 700 /home/vagrant/.ssh
     echo '#{public_key}' >> /home/vagrant/.ssh/authorized_keys
     chmod -R 600 /home/vagrant/.ssh/authorized_keys
     echo 'Host 192.168.*.*' >> /home/vagrant/.ssh/config
     echo 'StrictHostKeyChecking no' >> /home/vagrant/.ssh/config
     echo 'UserKnownHostsFile /dev/null' >> /home/vagrant/.ssh/config
     chmod -R 600 /home/vagrant/.ssh/config
     ", privileged: false
  config.hostsupdater.remove_on_suspend = false
end

